vector<vector<int>> indicesVoisins (NbPoints);

for (int i = 0; i < NbPoints; i++){
	indicesVoisins[i].push_back(-1);
	indicesVoisins[i].push_back(-1);
	indicesVoisins[i].push_back(-1);
	}

	for (int i = 0; i < NbTriangles; i++){

	if (indicesVoisins[3 * i][0] != -1)
		if(indicesVoisins[3 * i][1] != -1)
			indicesVoisins[3 * i][2] = i;
		else if (indicesVoisins[3 * i][0] == -1)
				indicesVoisins[3 * i][0] = i:
			else 
				indicesVoisins[3 * i][1] = i;	


	if (indicesVoisins[3 * i+1][0] != -1)
		if(indicesVoisins[3 * i+1][1] != -1)
			indicesVoisins[3 * i+1][2] = i;
		else if (indicesVoisins[3 * i+1][0] == -1)
				indicesVoisins[3 * i+1][0] = i:
			else 
				indicesVoisins[3 * i+1][1] = i;	


	if (indicesVoisins[3 * i+2][0] != -1)
		if(indicesVoisins[3 * i+2][1] != -1)
			indicesVoisins[3 * i+2][2] = i;
		else if (indicesVoisins[3 * i+2][0] == -1)
				indicesVoisins[3 * i+2][0] = i:
			else 
				indicesVoisins[3 * i+2][1] = i;	
	}


	----------------------------------------------

	void normcrossprod(float v1[3], float v2[3], float out[3])
{
	GLint i, j;
	GLfloat length;

	out[0] = v1[1] * v2[2] - v1[2] * v2[1];
	out[1] = v1[2] * v2[0] - v1[0] * v2[2];
	out[2] = v1[0] * v2[1] - v1[1] * v2[0];
	//normalize(out); 
}

	normales :

	Vector normRef;
	for {...
	get points 3 par 3 , p1 p2 p3 

		fichier >> indices[3 * i];
		fichier >> indices[3 * i + 1];
		fichier >> indices[3 * i + 2];

		Point* p1 = new Point(coordinates[indices[3 * i] * 3], coordinates[indices[3 * i] * 3 + 1], coordinates[indices[3 * i] * 3 + 2]);
		Point* p2 = new Point(coordinates[indices[3 * i + 1] * 3], coordinates[indices[3 * i + 1] * 3 + 1], coordinates[indices[3 * i + 1] * 3 + 2]);
		Point* p3 = new Point(coordinates[indices[3 * i + +2] * 3], coordinates[indices[3 * i + 2] * 3 + 1], coordinates[indices[3 * i + 2]
		Vector* v1 = new Vector(*p2, *p1);
		Vector* v2 = new Vector(*p3, *p1);


		v1->Normalize();
		v2->Normalize();

		GLfloat t1[3] = { v1->getX(), v1->getY(), v1->getZ() };
		GLfloat t2[3] = { v2->getX(), v2->getY(), v2->getZ() };
		GLfloat out[3];

		normcrossprod(t1, t2, out);

		if (i == 0) {
			all_normal[i * 3] = out[0];
			all_normal[i * 3 + 1] = out[1];
			all_normal[i * 3 + 2] = out[2];
			normRef = Vector(out[0], out[1], out[2]);
		}
		else {
			Vector v = Vector(out[0], out[1], out[2]);
			if (v.Scalar(normRef) > 0) {
				all_normal[i * 3] = out[0];
				all_normal[i * 3 + 1] = out[1];
				all_normal[i * 3 + 2] = out[2];
				normRef = v;
			}
			else {
				all_normal[i * 3] = -out[0];
				all_normal[i * 3 + 1] = -out[1];
				all_normal[i * 3 + 2] = -out[2];
				normRef = Vector(-out[0], -out[1], -out[2]);
			}
		}
		
		}